# -*- coding: utf-8 -*-
"""Movie Recommendation System.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_CGWX9Pyaac71D_h8CDh5ZHXuzYFGE2f

**Movie Recommendation System**

-------------

## **Objective**

Here are two objectives of a movie recommendation system:

**Objective 1: Top 5 Movie Recommendations**

* Provide a list of the top 5 movies that are most likely to be enjoyed by the user, based on their viewing history, preferences, and ratings.

This objective aims to suggest a curated selection of movies that are tailored to the user's individual tastes and preferences, increasing the chances of them discovering new movies they will enjoy.

**Objective 2: Movies According to Keyword Search**

* Provide a list of movies that match the user's search query (e.g., genre, director, actor, plot element), along with their corresponding ratings and reviews, to help users discover new movies that fit their specific interests.

This objective aims to provide users with a targeted list of movies that match their search query, allowing them to quickly find and explore new movies that align with their interests.

## **Data Source**

YBI Foundation

## **Import Library**
"""

import pandas as pd

import numpy as np

"""## **Import Data**"""

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv')

"""## **Describe Data**"""

df.describe()

"""## **Data Visualization**"""

df.head()

"""## **Data Preprocessing**"""

df.info()

df.shape

df_features = df[['Movie_Genre', 'Movie_Language', 'Movie_Homepage', 'Movie_Production_Country',
       'Movie_Spoken_Language']].fillna('')

df_features.shape

df_features

"""## **Define Target Variable (y) and Feature Variables (X)**"""

df.columns

y = df['Movie_Title']
x = df[['Movie_ID', 'Movie_Genre', 'Movie_Language',
       'Movie_Budget', 'Movie_Popularity', 'Movie_Release_Date',
       'Movie_Revenue', 'Movie_Runtime', 'Movie_Vote', 'Movie_Vote_Count',
       'Movie_Homepage', 'Movie_Keywords', 'Movie_Overview',
       'Movie_Production_House', 'Movie_Production_Country',
       'Movie_Spoken_Language', 'Movie_Tagline', 'Movie_Cast', 'Movie_Crew',
       'Movie_Director']]

x = df_features['Movie_Genre']+ ' ' + movie_features['Movie_Language']+ ' ' + movie_features['Movie_Homepage']+ ' '+ movie_features['Movie_Production_Country']+ ' '+ movie_features['Movie_Spoken_Language']

x

x.shape

"""## **Train Test Split**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""## **Modeling**"""

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(x)

"""## **Model Evaluation**"""

similarity_score

similarity_score.shape

"""## **Prediction**"""

Favourite_Movie_Name = input('Enter your favourite movie:')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score = list(enumerate(Similarity_Score))
Index_of_Close_Match_Movie = Recommendation_Score.index(max(Recommendation_Score, key=lambda x: x[1]))
print(Recommendation_Score)

len(Recommendation_Score)

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

print('Top 5 movies recommended for you : ')
i = 1
for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if(i<6):
    print(i, '.', title_from_index)
    i+=1

Movie_Name = input('Enter Movie : ')
list_of_all_titles = df['Movie_Title'].tolist()
Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)
Close_Match = Find_Close_Match[0]
Index_of_Movie = df[df['Movie_Title'] == Close_Match].index[0]
Recommendation_Score = list(enumerate(Similarity_Score))
sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print('Top 5 movies recommended:')

i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = df.loc[index, 'Movie_Title']
  if (i<6):
    print(i, '.', title_from_index)
    i+=1

"""## **Explaination**

Here's an explanation of a movie recommendation system:

**How the Movie Recommendation System Works**

The movie recommendation system is a sophisticated algorithm that suggests movies to users based on their preferences and viewing history. Here's how it works:

**Step 1: Building the Movie Database**

The system starts with a vast database of movies, containing information such as movie titles, genres, directors, actors, release dates etc.

**Step 2: User Input**

A user logs into the system and writes the title of a movie they have already watched and enjoyed. This movie is referred to as the "seed movie".

**Step 3: Calculating Similarity**

The system uses complex algorithms to calculate the similarity between the seed movie and other movies in the database. This is done by analyzing various factors such as:

* Genre: Movies with similar genres are more likely to be liked by the user.
* Director: Movies directed by the same director as the seed movie may have similar themes or styles.
* Actors: Movies featuring the same actors as the seed movie may have similar appeal.
* Plot elements: Movies with similar plot elements, such as action, romance, or comedy, may be of interest to the user.

**Step 4: Generating Recommendations**

The system generates a list of movies that are most similar to the seed movie based on the calculated similarity scores. The list is ranked according to the similarity score, with the most similar movies appearing at the top.

**Step 5: Displaying Recommendations**

The system displays the recommended movies to the user, along with relevant information such as ratings, reviews, and genre. The user can then browse through the list and discover new movies that match their tastes.

**Benefits**

The movie recommendation system provides several benefits to users:

* Personalized recommendations: The system takes into account individual preferences and viewing history to provide tailored suggestions.
* Discovery of new movies: Users can discover new movies that they may not have considered otherwise.
* Time-saving: The system saves users time by filtering out movies that are unlikely to be of interest.

By using a movie recommendation system, users can easily find new movies that match their tastes and preferences, making it a valuable tool for anyone who loves watching movies!
"""